select(c(model, cn)) %>%
mutate(order = rownames(.))
mt2
mt0 <- tibble(mtcars)
mt0 <- as_tibble(mtcars)
mt0
?as_tibble
mt0 <- as_tibble(mtcars, rownames = NA)
mt0
rownames(mt0)
mt2 <- arrange(mt0, desc(mpg)) %>%
select(c(model, cn)) %>%
mutate(order = rownames(.))
mt2 <- arrange(mt0, desc(mpg)) %>%
select(cn) %>%
mutate(order = rownames(.))
mt2
rownames(mt2)
mt0 <- as_tibble(mtcars, rownames = NA)
cn <- sort(colnames(mt0))
mt2 <- arrange(mt0, desc(mpg)) %>%
select(cn) %>%
mutate(order = rownames(.))
rownames(mt0)
mt0 <- rownames_to_column(mtcars, "model")
mt0
cn <- sort(colnames(mt0))[-"model"]
cn <- sort(colnames(mt0))[,-"model"]
cn <- sort(colnames(mt0))[,!"model"]
cn <- sort(colnames(mt0))
cn
cn <- cn[!cn == "model"]
cn
mt2 <- arrange(mt0, desc(mpg)) %>%
select(model, cn) %>%
mutate(order = rownames(.))
mt2
head(mt0)
head(mt2)
test <- dplyr::inner_join(mt2, mt0, by = "model")
head(test)
test <- dplyr::inner_join(mt2, mt0, by = c("model", cn))
head(test)
identical(test$model, mt2$model)
identical(colnames(test), colnames(model))
identical(colnames(test), colnames(mt2))
mt0 <- rownames_to_column(mtcars, "model")
cn <- sort(colnames(mt0))
cn <- cn[!cn == "model"]
mt2 <- arrange(mt0, desc(mpg)) %>%
select(model, cn) %>%
mutate(order = rownames(.))
test <- dplyr::inner_join(mt2, mt0, by = c("model", cn))
identical(test$model, mt2$model)
identical(colnames(test), colnames(mt2))
head(test)
head(mt2)
head(mt0)
mtcars
mtcars
sort(rownames(mtcars))
mtdf0 <- mtcars
mtdf2 <- mtcars[sort(rownames(mtcars)), sort(colnames(mtcars))]
mtdf0 <- mtcars
mtdf2 <- mtcars[sort(rownames(mtcars)), sort(colnames(mtcars))]
test <- mtdf[rownames(mtdf2), colnames(mtdf2)]
mtdf0 <- mtcars
mtdf2 <- mtcars[sort(rownames(mtcars)), sort(colnames(mtcars))]
test <- mtdf0[rownames(mtdf2), colnames(mtdf2)]
identical(rownames(mtdf2), colnames(test))
identical(rownames(mtdf2), rownames(test))
mtdf0 <- mtcars
mtdf2 <- mtcars[sort(rownames(mtcars)), sort(colnames(mtcars))]
test <- mtdf0[rownames(mtdf2), colnames(mtdf2)]
identical(colnames(mtdf2), colnames(test))
identical(rownames(mtdf2), rownames(test))
iris
nycflights13
library(nycflights13)
nycflights13
nycflights::flights
library(nycflights13)
flights
table(flights$tailnum)
flights
nycflights13::airports
table(airports$name)
airports
length(unique(airports$faa))
dim(airports)
ap1 <- select(sort(colnames(.))) %>%
arrange(lat) %>%
mutate(order = rownames(.))
# setting up example data
ap0 <- nycflights13::airports
ap1 <- select(ap0, sort(colnames(.))) %>%
arrange(lat) %>%
mutate(order = rownames(.))
ap0
# setting up example data
ap0 <- nycflights13::airports
ap1 <- select(ap0, sort(colnames(.))) %>%
arrange(lat) %>%
mutate(order = rownames(.))
ap1 <- ap0 %>%
select(sort(colnames(.))) %>%
arrange(lat) %>%
mutate(order = rownames(.))
ap1
# join two dataframes with 'correct order' tibble listed first
res <- dplyr::left_join(ap1, ap0, by = c(-order))
# join two dataframes with 'correct order' tibble listed first
res <- dplyr::left_join(ap1, ap0, by = -order)
# join two dataframes with 'correct order' tibble listed first
res <- dplyr::left_join(ap1, ap0, by = -"order")
cn_except <- colnames(ap1)[!"order"]
?left_join
# setting up example data
ap0 <- nycflights13::airports
ap1 <- ap0 %>%
select(sort(colnames(.))) %>%
arrange(lat) %>%
mutate(order = rownames(.))
cn <- colnames(ap1)
cn <- cn[!cn == "order"]
# join two dataframes with 'correct order' tibble listed first
res <- dplyr::left_join(ap1, ap0, by = cn)
# verify that resulting colnames and rownaems are in correct order
identical(res$model, mt1$model)
# setting up example data
ap0 <- nycflights13::airports
ap1 <- ap0 %>%
select(sort(colnames(.))) %>%
arrange(lat) %>%
mutate(order = rownames(.))
cn <- colnames(ap1)
cn <- cn[!cn == "order"]
# join two dataframes with 'correct order' tibble listed first
res <- dplyr::left_join(ap1, ap0, by = cn)
# verify that resulting colnames and rownaems are in correct order
identical(res$faa, mt1$faa)
# setting up example data
ap0 <- nycflights13::airports
ap1 <- ap0 %>%
select(sort(colnames(.))) %>%
arrange(lat) %>%
mutate(order = rownames(.))
cn <- colnames(ap1)
cn <- cn[!cn == "order"]
# join two dataframes with 'correct order' tibble listed first
res <- dplyr::left_join(ap1, ap0, by = cn)
# verify that resulting colnames and rownaems are in correct order
identical(res$faa, ap1$faa)
identical(colnames(res), colnames(ap1))
new_post("Working with dataframes, data importing, and a basic introduction to the dplyr package")
library(blogdown)
new_post("Working with dataframes, data importing, and a basic introduction to the dplyr package")
y <- lapply(X, FUN = sum)
y <- lapply(x, FUN = sum)
x <- list(a = 1:50, b = 51:100, c = 101:150, d = 151:200)
y <- lapply(x, FUN = sum)
y
y <- parallel::mclapply(x, FUN = sum, mc.cores = 4)
y
?parlapply
?parLapply
library(parallel)
workers <- makeCluster(4)
y <- parLapply(x, FUN = sum)
y <- parLapply(x, FUN = sum, workers)
?foreach
devtools::install_github("jimhester/vroom")
remove.packages("vroom")
devtools::install_github("jimhester/vroom")
remove.packages("vroom")
devtools::install_github("jimhester/vroom")
.libPaths()
.libPaths()
.libPath()
library(blogdown)
new_post("Lab Meeting: Our Experience with Seurat")
blogdown:::serve_site()
blogdown:::serve_site()
BiocManager::install("GenVisR")
library(GenVisR)
mutationData <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Mutation_Data.tsv")
clinicalData <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Clinical.tsv")
mutationBurden <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_MutationBurden.tsv")
glimpse(mutationData)
library(tidyverse)
glimpse(mutationData)
# reformat data for waterfall
mutationData <- mutationData[,c("patient", "gene.name", "trv.type", "amino.acid.change")]
colnames(mutationData) <- c("sample", "gene", "variant_class", "amino.acid.change")
# create vector for mutation priority ordering for plotting
mutation_priority <- as.character(unique(mutationData$variant_class))
# create initial plot
waterfall(mutationData, fileType = "Custom", variant_class_order = mutation_priority)
install.packages("diffdf")
mtcars
sample(colnames(mtcars))
mtcars2 <- mtcars[,sample(colnames(mtcars))]
diffdf::diffdf(mtcars, mtcars2)
mtcars2
mtcars
?diffdf
diffdf::diffdf(mtcars, mtcars2, keys  = rownames(.))
diffdf::diffdf(mtcars, mtcars2, keys  = rownames(mtcars))
diffdf::diffdf(mtcars, mtcars2, keys  = "id")
diffdf::diffdf(mtcars, mtcars2, keys  = "wr")
diffdf::diffdf(mtcars, mtcars2, keys  = "wt")
dim(mtcars)
length(unique(mtcars$qsec))
length(unique(mtcars$wt))
mtcars <- tibble(mtcars)
mtcars
mtcars
rm(mtcars)
mtcars
as_tibble(mtcars)
as_tibble(mtcars, rownames = "model")
mtcars <- as_tibble(mtcars, rownames = "model")
mtcars2 <- mtcars[,sample(colnames(mtcars))]
mtcars2
diffdf(mtcars, mtcars2, keys = "model")
diffdf::diffdf(mtcars, mtcars2, keys = "model")
ggplot(mtcars, aes(wt, qsec), color = cyl) +
geom_point()
ggplot(mtcars, aes(wt, qsec), size = cyl) +
geom_point()
ggplot(mtcars, aes(wt, qsec), color = cyl) +
geom_point()
glimpse(mtcars)
ggplot(mtcars, aes(wt, qsec, color = cyl) +
geom_point()
ggplot(mtcars, aes(wt, qsec, color = cyl)) +
geom_point()
ggplot(mtcars, aes(wt, qsec, color = cyl)) +
geom_point()
ggplot(mtcars, aes(wt, qsec, color = cyl)) +
geom_point() +
theme(cex = 0.5)
ggplot(mtcars, aes(wt, qsec, color = cyl)) +
geom_point() +
theme(size = 0.5)
ggplot(mtcars, aes(wt, qsec, color = cyl)) +
geom_point() +
theme(aes(size = 0.5))
mtcars1 <- as_tibble(mtcars, rownames = "model")
mtcars
rm(mtcars)
mtcars1 <- as_tibble(mtcars, rownames = "model")
mtcars2 <- mtcars1[,sample(colnames(mtcars1))]
diffdf::diffdf(mtcars, mtcars2, keys = "model")
mtcars1 <- as_tibble(mtcars, rownames = "model")
mtcars2 <- mtcars1[,sample(colnames(mtcars1))]
diffdf::diffdf(mtcars1, mtcars2, keys = "model")
?reprex
reprex(
mtcars1 <- as_tibble(mtcars, rownames = "model")
mtcars2 <- mtcars1[,sample(colnames(mtcars1))]
reprex({
mtcars1 <- as_tibble(mtcars, rownames = "model")
mtcars2 <- mtcars1[,sample(colnames(mtcars1))]
diffdf::diffdf(mtcars1, mtcars2, keys = "model")
})
library(reprex)
reprex({
mtcars1 <- as_tibble(mtcars, rownames = "model")
mtcars2 <- mtcars1[,sample(colnames(mtcars1))]
diffdf::diffdf(mtcars1, mtcars2, keys = "model")
})
reprex({
mtcars1 <- tibble::as_tibble(mtcars, rownames = "model")
mtcars2 <- mtcars1[,sample(colnames(mtcars1))]
diffdf::diffdf(mtcars1, mtcars2, keys = "model")
})
diamonds
diffdf::diffdf(diamonds, diamonds[,sample(colnames(diamonds))])
# Reformat the mutation data for waterfall()
mutationData <- mutationData[,c("patient", "gene.name", "trv.type", "amino.acid.change")]
mutationData <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Mutation_Data.tsv")
clinicalData <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Clinical.tsv")
mutationBurden <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_MutationBurden.tsv")
# Reformat the mutation data for waterfall()
mutationData <- mutationData[,c("patient", "gene.name", "trv.type", "amino.acid.change")]
colnames(mutationData) <- c("sample", "gene", "variant_class", "amino.acid.change")
# Create a vector to save mutation priority order for plotting
mutation_priority <- as.character(unique(mutationData$variant_class))
# Create an initial plot
waterfall(mutationData, fileType = "Custom", variant_class_order=mutation_priority)
set.seed(426)
library(gridExtra)
inputData <- data.frame(sample = sample(1:5, 20, replace = T),
gene = sample(letters[1:5], 20, replace = T),
variant_class = sample(c("silent", "frameshift", "missense"), 20, replace = T))
most_deleterious <- c("frameshift", "missense", "silent")
p1 <- waterfall(inputData, fileType = "Custom", variant_class_order = most_deleterious, mainXlabel = T, out = "grob")
p2 <- waterfall(inputData, fileType = "Custom", variant_class_order = rev(most_deleterious), mainXlabel = T, out = "grob")
grid.arrange(p1, p2, ncol = 2)
inputData[inputData$sample=="5" & inputData$gene=="a",]
mutationHierarch <- c("nonsense", "frame_shift_del", "frame_shift_ins", "in_frame_del", "splice_site_del", "splice_site", "missense", "splice_region", "rna")
waterfall(mutationData, fileType = "Custom", variant_class_order = mutationHierarchy)
mutationHierarchy <- c("nonsense", "frame_shift_del", "frame_shift_ins", "in_frame_del", "splice_site_del", "splice_site", "missense", "splice_region", "rna")
waterfall(mutationData, fileType = "Custom", variant_class_order = mutationHierarchy)
mutationData <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Mutation_Data.tsv")
clinicalData <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Clinical.tsv")
mutationBurden <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_MutationBurden.tsv")
# Reformat the mutation data for waterfall()
mutationData <- mutationData[,c("patient", "gene.name", "trv.type", "amino.acid.change")]
colnames(mutationData) <- c("sample", "gene", "variant_class", "amino.acid.change")
# Create a vector to save mutation priority order for plotting
mutation_priority <- as.character(unique(mutationData$variant_class))
# Create an initial plot
waterfall(mutationData, fileType = "Custom", variant_class_order=mutation_priority)
mutationHierarchy <- c("nonsense", "frame_shift_del", "frame_shift_ins", "in_frame_del", "splice_site_del", "splice_site", "missense", "splice_region", "rna")
waterfall(mutationData, fileType = "Custom", variant_class_order = mutationHierarchy)
plot1 <- waterfall(mutationData, fileType = "Custom", variant_class_order = mutationHierarchy)
print(plot1)
plot1
mutationData <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Mutation_Data.tsv")
clinicalData <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Clinical.tsv")
mutationBurden <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_MutationBurden.tsv")
# Reformat the mutation data for waterfall()
mutationData <- mutationData[,c("patient", "gene.name", "trv.type", "amino.acid.change")]
colnames(mutationData) <- c("sample", "gene", "variant_class", "amino.acid.change")
# Create a vector to save mutation priority order for plotting
mutation_priority <- as.character(unique(mutationData$variant_class))
# Create an initial plot
waterfall(mutationData, fileType = "Custom", variant_class_order=mutation_priority)
glimpse(mutationData)
?waterfall
# Reformat the mutation data for waterfall()
mutationData <- mutationData[,c("patient", "gene.name", "trv.type", "amino.acid.change")]
mutationData <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Mutation_Data.tsv")
clinicalData <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Clinical.tsv")
mutationBurden <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_MutationBurden.tsv")
# Reformat the mutation data for waterfall()
mutationData <- mutationData[,c("patient", "gene.name", "trv.type", "amino.acid.change")]
colnames(mutationData) <- c("sample", "gene", "variant_class", "amino.acid.change")
# Create a vector to save mutation priority order for plotting
mutation_priority <- as.character(unique(mutationData$variant_class))
# Create an initial plot
waterfall(mutationData, fileType = "Custom", variant_class_order=mutation_priority, out = "grob")
# Create an initial plot
plot1 <- waterfall(mutationData, fileType = "Custom", variant_class_order=mutation_priority, out = "grob")
print(plot1)
# Create an initial plot
plot1 <- waterfall(mutationData, fileType = "Custom", variant_class_order=mutation_priority, out = "plot")
print(plot1)
head(inputData)
head(mutationData)
# Create an initial plot
plot1 <- waterfall(mutationData, fileType = "Custom", variant_class_order=mutation_priority, out = "grob")
grid.arrange(plot1, ncol = 1)
mutationHierarchy <- c("nonsense", "frame_shift_del", "frame_shift_ins", "in_frame_del", "splice_site_del", "splice_site", "missense", "splice_region", "rna")
grob1 <- waterfall(mutationData, fileType = "Custom", variant_class_order = mutationHierarchy, out = "grob")
grid.arrange(grob1, ncol = 1)
?grid.arrange
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(rprojroot)
library(fs)
library(GenVisR)
library(tidyverse)
mutationData <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Mutation_Data.tsv")
clinicalData <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Clinical.tsv")
mutationBurden <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_MutationBurden.tsv")
# Reformat the mutation data for waterfall()
mutationData <- mutationData[,c("patient", "gene.name", "trv.type", "amino.acid.change")]
colnames(mutationData) <- c("sample", "gene", "variant_class", "amino.acid.change")
# Create a vector to save mutation priority order for plotting
mutation_priority <- as.character(unique(mutationData$variant_class))
# Create an initial plot
plot1 <- waterfall(mutationData, fileType = "Custom", variant_class_order=mutation_priority, out = "grob")
grid.arrange(plot1, ncol = 1)
library(gridExtra)
set.seed(426)
library(gridExtra)
inputData <- data.frame(sample = sample(1:5, 20, replace = T),
gene = sample(letters[1:5], 20, replace = T),
variant_class = sample(c("silent", "frameshift", "missense"), 20, replace = T))
most_deleterious <- c("frameshift", "missense", "silent")
p1 <- waterfall(inputData, fileType = "Custom", variant_class_order = most_deleterious, mainXlabel = T, out = "grob")
p2 <- waterfall(inputData, fileType = "Custom", variant_class_order = rev(most_deleterious), mainXlabel = T, out = "grob")
grid.arrange(p1, p2, ncol = 2)
inputData[inputData$sample=="5" & inputData$gene=="a",]
mut_colors <- scales::hue_pal()(length(mutationHierarchy))
mutationHierarchy <- c("nonsense", "frame_shift_del", "frame_shift_ins", "in_frame_del", "splice_site_del", "splice_site", "missense", "splice_region", "rna")
grob1 <- waterfall(mutationData, fileType = "Custom", variant_class_order = mutationHierarchy, out = "grob")
grid.arrange(grob1, ncol = 1)
mut_colors <- scales::hue_pal()(length(mutationHierarchy))
mutationColors <- set_names(mutationHierarchy, mut_colors)
mutationColors
mut_colors <- scales::hue_pal()(length(mutationHierarchy))
mutationColors <- set_names(mut_colors, mutationHierarchy)
mutationColors
mut_colors <- scales::hue_pal()(length(mutationHierarchy))
mutationColors <- set_names(mut_colors, mutationHierarchy)
grob1 <- waterfall(mutationData, fileType = "Custom", variant_class_order=mutationHierarchy, mainPalette=mutationColours, out = "grob")
mutationColors <- set_names(mut_colors, mutationHierarchy)
mutationColors
grob1 <- waterfall(mutationData, fileType = "Custom", variant_class_order=mutationHierarchy, mainPalette=mutationColours, out = "grob")
grob1 <- waterfall(mutationData, fileType = "Custom", variant_class_order=mutationHierarchy, mainPalette=mutationColors, out = "grob")
grid.arrange(grob1)
grid.arrange(grob1)
?reshape2
library(tidyr)
# reformat clinical data to long format
clinicalData_2 <- clinicalData[,c(1,2,3,5)]
colnames(clinicalData_2) <- c("sample", "Months on Study", "Best Response", "Treatment Setting")
clinicalData_2 <- melt(data=clinicalData_2, id.vars=c("sample"))
?reshape::melt
clinicalData_2
# reformat clinical data to long format
clinicalData_2 <- clinicalData[,c(1,2,3,5)]
colnames(clinicalData_2) <- c("sample", "Months on Study", "Best Response", "Treatment Setting")
clinicalData_2 <- groupby(clinicalData_2, sample) %>%
tidyr::gather("variable", "value")
library('tidyverse')
library('fs')
library('rprojroot')
library('glue')
clinicalData_2 <- dplyr::groupby(clinicalData_2, sample) %>%
tidyr::gather("variable", "value")
clinicalData_2 <- group_by(clinicalData_2, sample) %>%
tidyr::gather("variable", "value")
head(clinicalData_2)
# reformat clinical data to long format
clinicalData_2 <- clinicalData[,c(1,2,3,5)]
colnames(clinicalData_2) <- c("sample", "Months on Study", "Best Response", "Treatment Setting")
group_by(clinicalData_2, sample) %>%
tidyr::gather("variable", "value")
head(clinicalData_2)
group_by(clinicalData_2, sample) %>%
tidyr::gather("variable", "value", -sample)
clinicalData_2 <- group_by(clinicalData_2, sample) %>%
tidyr::gather("variable", "value", -sample)
clinicalData_2
# find which samples are not in the mutationBurden data frame
sampleVec <- unique(mutationData$sample)
sampleVec[!sampleVec %in% clinicalData$sample]
# fix clinical data to match mutationData
clinicalData_2$sample <- gsub("^WU(0)+", "", clinicalData_2$sample)
clinicalData_2
table(clinicalData_2$variable)
?waterfall
clinicalData_2
clinicalData_2$sample
mutationData$sample
# reformat clinical data to long format
clinicalData_2 <- clinicalData[,c(1,2,3,5)]
colnames(clinicalData_2) <- c("sample", "Months on Study", "Best Response", "Treatment Setting")
clinicalData_2 <- group_by(clinicalData_2, sample) %>%
tidyr::gather("variable", "value", -sample)
# find which samples are not in the mutationBurden data frame
sampleVec <- unique(mutationData$sample)
sampleVec[!sampleVec %in% clinicalData$sample]
# fix clinical data to match mutationData
clinicalData_2$sample <- gsub("^WU(0)+", "", clinicalData_2$sample)
# create the waterfall plot
waterfall(mutationData, fileType = "Custom", variant_class_order=mutationHierarchy, mainPalette=mutationColours, mutBurden=mutationBurden, clinData=clinicalData_2, clinLegCol=3, clinVarCol=c('0-6'='#ccbadc', '6.1-12'='#9975b9', '12.1+'='#663096', 'Partial Response'='#c2ed67', 'Progressive Disease'='#E63A27', 'Stable Disease'='#e69127', '1'='#90ddee', '2'='#649aa6', '3+'='#486e77'), clinVarOrder=c('1', '2', '3+', 'Partial Response', 'Stable Disease', 'Progressive Disease', '0-6', '6.1-12', '12.1+'), section_heights=c(1, 5, 1))
install.packages(c("tidyverse", "tidymodel", "AmesHousing"),
repos = "http://cran.r-project.org")
install.packages("tidymodels")
install.packages("leaflet")
install.packages("Ameshousing")
install.packages("AmesHousing")
xaringan::infinite_moon_reader()
install.packages("kknn")
xaringan::infinite_moon_reader()
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(rprojroot)
library(fs)
library(glue)
library(tidyr)
library(dplyr)
library(repurrrsive)
install.packages("repurrrsive")
manual_seq <- c(0.1, 0.2, 0.3, 0.4)
fn_seq <- seq(0.1, 0.4, by = 0.1)
fn_whole_seq <- seq(1, 4, by = 1)/10
manual_seq == fn_seq
manual_seq == fn_whole_seq
library(tidyr)
library(dplyr)
library(repurrrsive)
users <- tibble(user = gh_users)
glimpse(users)
str(users)
View(users)
View(users[[1]][[1]])
users$user[[1]]
names(users$user[[1]])
test <- unnest_wider(users, user)
update.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
knitr::opts_chunk$set(message = F, warning = F)
library(tidyverse)
library(rprojroot)
library(glue)
library(fs)
proj_dir <- rprojroot::find_root(criterion = rprojroot::has_file_pattern("*.Rproj"))
users <- tibble(user = gh_users)
library(repurrsive)
library(repurrrsive)
library(dplyr)
library(tidyr)
users <- tibble(user = gh_users)
install.packages("usethis")
