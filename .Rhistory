blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
traceback()
?new_post
getOption("blogdown.subdir")
new_post("test")
library(blogdown)
getOption("blogdown.subdir")
new_post("test")
new_post("test", subdir = "blog")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
new_post("test2", subdir = "blog")
library(blogdown)
new_post("test2", subdir = "blog")
new_post("test")
library(blogdown)
new_post("test3")
blogdown:::serve_site()
library(blogdown)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
knitr::opts_chunk$set(echo = F, warning = F, message = F)
set.seed(45679)
av_survey_sample <- av_survey %>%
# select jsut a few columns and give some more intuitive column names
select(id = `Response ID`,
start_date = `Start Date`,
end_date = `End Date`,
interacted_with_av_as_pedestrian = InteractPedestrian,
interacted_with_av_as_cyclist = InteractBicycle,
circumstanses_of_interaction = CircumstancesCoded, # lol @ typo in data
approve_av_testing_pgh = FeelingsProvingGround) %>%
# take a random sample of 10 rows
sample_n(10) %>%
# make data frame so that we view the whole thing
as.data.frame()
library(tidtidyverse)
library(tidyverse)
library(lubridate)
av_survey <- read_csv("~/Downloads/bikepghpublic.csv")
set.seed(45679)
av_survey_sample <- av_survey %>%
# select jsut a few columns and give some more intuitive column names
select(id = `Response ID`,
start_date = `Start Date`,
end_date = `End Date`,
interacted_with_av_as_pedestrian = InteractPedestrian,
interacted_with_av_as_cyclist = InteractBicycle,
circumstanses_of_interaction = CircumstancesCoded, # lol @ typo in data
approve_av_testing_pgh = FeelingsProvingGround) %>%
# take a random sample of 10 rows
sample_n(10) %>%
# make data frame so that we view the whole thing
as.data.frame()
av_survey_sample
map(av_survey_sample, ~ sum(is.na(.x)))
map_dbl(av_survey_sample, ~ sum(is.na(.x)))
av_survey_sample %>%
select_if(is.numeric)
av_survey_sample %>%
select_if(~sum(is.na(.x)) > 0)
?predict
knitr::opts_chunk$set(echo = F, warning = F, message = F)
mtcars
mt2 <- data.frame(row.names = rownames(mtcars), color = "red")
mt2 <- tibble(row.names = rownames(mtcars), color = "red")
mt2
?tibble
mt2 <- tibble(row.names = rownames(mtcars), color = "red") %>%
column_to_rownames("row.names")
mt2
iris %>% as_tibble %>% mutate(index=seq(n())) %>%
arrange(desc(index))
head(iris)
test <- iris %>% as_tibble %>% mutate(index=seq(n())) %>%
arrange(desc(index))
iris
head(test)
head(iris)
iris2 <- arrange(iris, desc(Sepal.Width)
test <- iris %>%
rownames(iris2)
iris2 <- arrange(iris, desc(Sepal.Width))
iris2
head(iris)
mtcars
mtcars <- as_tibble(mtcars)
mt2 <- arrange(mtcars, desc(mpg)) %>%
mutate(order = rownames(.))
mt2
mtcars <- rownames_to_column(mtcars, "model")
mt2 <- arrange(mtcars, desc(mpg)) %>%
mutate(order = rownames(.))
mt2
test <- dplyr::inner_join(mtcars, mt2, by = "model")
test
test$order
test <- dplyr::inner_join(mt2, mtcars, by = "model")
test
test$order
mtcars
order(colnames(mt2))
sort(colnames(mt2))
mtcars <- rownames_to_column(mtcars, "model")
rm(mtcars)
mtcars
mtcars0 <- rownames_to_column(mtcars, "model")
mt2 <- arrange(mtcars0, desc(mpg)) %>%
select(sort(colnames(.))) %>%
mutate(order = rownames(.))
mtcars0
mt0 <- rownames_to_column(mtcars, "model")
mt2 <- arrange(mt0, desc(mpg)) %>%
select(sort(colnames(.))) %>%
mutate(order = rownames(.))
mt2
mt
mt0
?select
cn <- colnames(mt0)[-model]
cn <- colnames(mt0)[-c("model")]
colnames(mt0)
cn <- colnames(mt0)[,-c("model")]
cn <- colnames(mt0)[,-"model")]
cn <- colnames(mt0)[,-model]
cn <- colnames(mt0)[-1]
cn
cn <- sort(colnames(mt0)[-1])
cn
mt0 <- rownames_to_column(mtcars, "model")
cn <- sort(colnames(mt0)[-1])
mt2 <- arrange(mt0, desc(mpg)) %>%
select(c(model, cn)) %>%
mutate(order = rownames(.))
mt2
mt0 <- tibble(mtcars)
mt0 <- as_tibble(mtcars)
mt0
?as_tibble
mt0 <- as_tibble(mtcars, rownames = NA)
mt0
rownames(mt0)
mt2 <- arrange(mt0, desc(mpg)) %>%
select(c(model, cn)) %>%
mutate(order = rownames(.))
mt2 <- arrange(mt0, desc(mpg)) %>%
select(cn) %>%
mutate(order = rownames(.))
mt2
rownames(mt2)
mt0 <- as_tibble(mtcars, rownames = NA)
cn <- sort(colnames(mt0))
mt2 <- arrange(mt0, desc(mpg)) %>%
select(cn) %>%
mutate(order = rownames(.))
rownames(mt0)
mt0 <- rownames_to_column(mtcars, "model")
mt0
cn <- sort(colnames(mt0))[-"model"]
cn <- sort(colnames(mt0))[,-"model"]
cn <- sort(colnames(mt0))[,!"model"]
cn <- sort(colnames(mt0))
cn
cn <- cn[!cn == "model"]
cn
mt2 <- arrange(mt0, desc(mpg)) %>%
select(model, cn) %>%
mutate(order = rownames(.))
mt2
head(mt0)
head(mt2)
test <- dplyr::inner_join(mt2, mt0, by = "model")
head(test)
test <- dplyr::inner_join(mt2, mt0, by = c("model", cn))
head(test)
identical(test$model, mt2$model)
identical(colnames(test), colnames(model))
identical(colnames(test), colnames(mt2))
mt0 <- rownames_to_column(mtcars, "model")
cn <- sort(colnames(mt0))
cn <- cn[!cn == "model"]
mt2 <- arrange(mt0, desc(mpg)) %>%
select(model, cn) %>%
mutate(order = rownames(.))
test <- dplyr::inner_join(mt2, mt0, by = c("model", cn))
identical(test$model, mt2$model)
identical(colnames(test), colnames(mt2))
head(test)
head(mt2)
head(mt0)
mtcars
mtcars
sort(rownames(mtcars))
mtdf0 <- mtcars
mtdf2 <- mtcars[sort(rownames(mtcars)), sort(colnames(mtcars))]
mtdf0 <- mtcars
mtdf2 <- mtcars[sort(rownames(mtcars)), sort(colnames(mtcars))]
test <- mtdf[rownames(mtdf2), colnames(mtdf2)]
mtdf0 <- mtcars
mtdf2 <- mtcars[sort(rownames(mtcars)), sort(colnames(mtcars))]
test <- mtdf0[rownames(mtdf2), colnames(mtdf2)]
identical(rownames(mtdf2), colnames(test))
identical(rownames(mtdf2), rownames(test))
mtdf0 <- mtcars
mtdf2 <- mtcars[sort(rownames(mtcars)), sort(colnames(mtcars))]
test <- mtdf0[rownames(mtdf2), colnames(mtdf2)]
identical(colnames(mtdf2), colnames(test))
identical(rownames(mtdf2), rownames(test))
iris
nycflights13
library(nycflights13)
nycflights13
nycflights::flights
library(nycflights13)
flights
table(flights$tailnum)
flights
nycflights13::airports
table(airports$name)
airports
length(unique(airports$faa))
dim(airports)
ap1 <- select(sort(colnames(.))) %>%
arrange(lat) %>%
mutate(order = rownames(.))
# setting up example data
ap0 <- nycflights13::airports
ap1 <- select(ap0, sort(colnames(.))) %>%
arrange(lat) %>%
mutate(order = rownames(.))
ap0
# setting up example data
ap0 <- nycflights13::airports
ap1 <- select(ap0, sort(colnames(.))) %>%
arrange(lat) %>%
mutate(order = rownames(.))
ap1 <- ap0 %>%
select(sort(colnames(.))) %>%
arrange(lat) %>%
mutate(order = rownames(.))
ap1
# join two dataframes with 'correct order' tibble listed first
res <- dplyr::left_join(ap1, ap0, by = c(-order))
# join two dataframes with 'correct order' tibble listed first
res <- dplyr::left_join(ap1, ap0, by = -order)
# join two dataframes with 'correct order' tibble listed first
res <- dplyr::left_join(ap1, ap0, by = -"order")
cn_except <- colnames(ap1)[!"order"]
?left_join
# setting up example data
ap0 <- nycflights13::airports
ap1 <- ap0 %>%
select(sort(colnames(.))) %>%
arrange(lat) %>%
mutate(order = rownames(.))
cn <- colnames(ap1)
cn <- cn[!cn == "order"]
# join two dataframes with 'correct order' tibble listed first
res <- dplyr::left_join(ap1, ap0, by = cn)
# verify that resulting colnames and rownaems are in correct order
identical(res$model, mt1$model)
# setting up example data
ap0 <- nycflights13::airports
ap1 <- ap0 %>%
select(sort(colnames(.))) %>%
arrange(lat) %>%
mutate(order = rownames(.))
cn <- colnames(ap1)
cn <- cn[!cn == "order"]
# join two dataframes with 'correct order' tibble listed first
res <- dplyr::left_join(ap1, ap0, by = cn)
# verify that resulting colnames and rownaems are in correct order
identical(res$faa, mt1$faa)
# setting up example data
ap0 <- nycflights13::airports
ap1 <- ap0 %>%
select(sort(colnames(.))) %>%
arrange(lat) %>%
mutate(order = rownames(.))
cn <- colnames(ap1)
cn <- cn[!cn == "order"]
# join two dataframes with 'correct order' tibble listed first
res <- dplyr::left_join(ap1, ap0, by = cn)
# verify that resulting colnames and rownaems are in correct order
identical(res$faa, ap1$faa)
identical(colnames(res), colnames(ap1))
new_post("Working with dataframes, data importing, and a basic introduction to the dplyr package")
library(blogdown)
new_post("Working with dataframes, data importing, and a basic introduction to the dplyr package")
y <- lapply(X, FUN = sum)
y <- lapply(x, FUN = sum)
x <- list(a = 1:50, b = 51:100, c = 101:150, d = 151:200)
y <- lapply(x, FUN = sum)
y
y <- parallel::mclapply(x, FUN = sum, mc.cores = 4)
y
?parlapply
?parLapply
library(parallel)
workers <- makeCluster(4)
y <- parLapply(x, FUN = sum)
y <- parLapply(x, FUN = sum, workers)
?foreach
devtools::install_github("jimhester/vroom")
remove.packages("vroom")
devtools::install_github("jimhester/vroom")
remove.packages("vroom")
devtools::install_github("jimhester/vroom")
.libPaths()
.libPaths()
.libPath()
